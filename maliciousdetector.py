import os
import sys
import logging
import pefile

def log_activity(message):
    logging.basicConfig(filename='activity.log', level=logging.INFO)
    logging.info(message)

def detect_malicious(file_path):
    # Check if file exists
    if not os.path.exists(file_path):
        return False

    # Check if the file is a Windows executable
    try:
        pe = pefile.PE(file_path)
    except pefile.PEFormatError:
        return False

    # Check if the file tries to modify memory
    for section in pe.sections:
        if section.IMAGE_SCN_MEM_WRITE:
            log_activity(f"Program {os.path.basename(file_path)} tried to modify memory")

    # Check if the file tries to tamper with files
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        if 'kernel32.dll' in str(entry.dll):
            for function in entry.imports:
                if 'WriteFile' in str(function.name):
                    log_activity(f"Program {os.path.basename(file_path)} tried to tamper with files")

    # Check if the file communicates with an external server
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        if 'ws2_32.dll' in str(entry.dll):
            for function in entry.imports:
                if 'connect' in str(function.name):
                    log_activity(f"Program {os.path.basename(file_path)} sent a request to {function.name}")

    # Check if the file tries to modify the registry
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        if 'advapi32.dll' in str(entry.dll):
            for function in entry.imports:
                if 'RegOpenKeyExA' in str(function.name):
                    log_activity(f"Program {os.path.basename(file_path)} tried to modify the registry {function.name}")

    return True

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python detect_malicious.py <file_path>")
        sys.exit(1)

    file_path = sys.argv[1]
    detect_malicious(file_path)
