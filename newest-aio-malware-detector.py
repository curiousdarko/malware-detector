# replace all examples




import os
import logging
import pefile
import zipfile
from typing import List
from pathlib import Path
import urllib.request
import hashlib
import threading
from PyQt5 import QtWidgets, QtGui, QtCore

# Define the DLL compatibility dictionary
DLL_COMPATIBILITY = {
    'kernel32.dll': ['VirtualAlloc', 'VirtualFree', 'VirtualProtect', 'VirtualQuery', 'CreateFile', 'ReadFile', 'WriteFile', 'CloseHandle'],
    'advapi32.dll': ['RegOpenKeyExA', 'RegQueryValueExA', 'RegSetValueExA', 'RegCloseKey'],
    'user32.dll': ['MessageBoxA'],
    'gdi32.dll': ['CreateCompatibleDC', 'CreateCompatibleBitmap', 'CreateFontIndirectA', 'SelectObject', 'BitBlt', 'DeleteDC', 'DeleteObject'],
    'ole32.dll': ['CoInitializeEx', 'CoCreateInstance', 'CoUninitialize'],
    'shell32.dll': ['ShellExecuteA'],
    'wininet.dll': ['InternetOpenA', 'InternetOpenUrlA', 'InternetReadFile', 'InternetCloseHandle'],
    'ws2_32.dll': ['WSAStartup', 'socket', 'connect', 'send', 'recv', 'closesocket', 'WSACleanup']
}

class MalwareScanner:
    def __init__(self):
        self.malware_hashes = []
        self.load_malware_hashes()

    def load_malware_hashes(self):
        try:
            with urllib.request.urlopen("https://example.com/malware_hashes.txt") as f:
                self.malware_hashes = f.read().decode().strip().split("\n")
        except:
            pass

    def is_malware(self, file_path: str) -> bool:
        # Check if file exists
        if not os.path.exists(file_path):
            log_result(f"File {os.path.basename(file_path)} not found")
            return False

        # Check if the file is a Windows executable, a JAR file, or a VBS file
        if file_path.lower().endswith('.jar'):
            try:
                with zipfile.ZipFile(file_path, 'r') as zip_file:
                    for name in zip_file.namelist():
                        if name.endswith('.class'):
                            log_activity(f"File {os.path.basename(file_path)} contains a class file {name}")
                            return False  # JAR file with class file is not malicious
            except zipfile.BadZipFile:
                log_result(f"File {os.path.basename(file_path)} is not a valid JAR file")
                return False
        elif file_path.lower().endswith('.vbs'):
            log_activity(f"File {os.path.basename(file_path)} is a VBS file")
            return False  # VBS file is not malicious
        else:
            try:
                pe = pefile.PE(file_path)
            except pefile.PEFormatError:
                log_result(f"File {os.path.basename(file_path)} is not a valid Windows executable")
                return False

            # Check if the file is compatible with known DLLs
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                dll_name = entry.dll.decode().lower()
                if dll_name in DLL_COMPATIBILITY:
                    for function in entry.imports:
                        func_name = function.name.decode().lower()
                        if func_name in DLL_COMPATIBILITY[dll_name]:
                            log_activity(f"Program {os.path.basename(file_path)} is compatible with {dll_name}.{func_name}")
                else:
                    log_activity(f"Program {os.path.basename(file_path)} is not compatible with {dll_name}")

            # Check if the file tries to modify memory
            for section in pe.sections:
                if section.IMAGE_SCN_MEM_WRITE:
                    log_activity(f"Program {os.path.basename(file_path)} tries to modify memory in {section.Name.decode().rstrip('\x00')}")
                    return True  # File tries to modify memory and is malicious

            # Check if the file matches any known malware hashes
            file_hash = hashlib.sha256(open(file_path, 'rb').read()).hexdigest()
            if file_hash in self.malware_hashes:
                log_activity(f"File {os.path.basename(file_path)} matches a known malware hash")
                return True  # File matches a known malware hash and is malicious

        return False

    def scan_files(self, file_paths: List[str], progress_callback=None):
        results = []
        for i, file_path in enumerate(file_paths):
            if progress_callback:
                progress_callback(i, len(file_paths))
            result = self.is_malware(file_path)
            results.append((file_path, result))
        return results

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Malware Scanner")
        self.setWindowIcon(QtGui.QIcon("icon.png"))

        # Set dark theme
        self.setDarkTheme()

        # Create the central widget
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)

        # Create the file path label and entry
        file_path_label = QtWidgets.QLabel("Select files to scan:")
        self.file_path_list = QtWidgets.QListWidget()
        add_file_button = QtWidgets.QPushButton("Add file(s)")
        add_file_button.clicked.connect(self.add_files)
        remove_file_button = QtWidgets.QPushButton("Remove file(s)")
        remove_file_button.clicked.connect(self.remove_files)

        # Create the scan button
        scan_button = QtWidgets.QPushButton("Scan")
        scan_button.clicked.connect(self.scan_files)

        # Create the progress bar
        self.progress_bar = QtWidgets.QProgressBar()
        self.progress_bar.setVisible(False)

        # Create the result log
        self.result_log = QtWidgets.QTextEdit()
        self.result_log.setReadOnly(True)

        # Create the layout
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(file_path_label)
        layout.addWidget(self.file_path_list)
        layout.addWidget(add_file_button)
        layout.addWidget(remove_file_button)
        layout.addWidget(scan_button)
        layout.addWidget(self.progress_bar)
        layout.addWidget(self.result_log)
        central_widget.setLayout(layout)

    def setDarkTheme(self):
        # Set the dark theme
        app.setStyle("Fusion")
        palette = QtGui.QPalette()
        palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Base, QtGui.QColor(25, 25, 25))
        palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
        palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
        palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
        palette.setColor(QtGui.QPalette.Link, QtGui.QColor(42, 130, 218))
        palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42, 130, 218))
        palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
        app.setPalette(palette)

    def add_files(self):
        file_paths, _ = QtWidgets.QFileDialog.getOpenFileNames(self, "Select file(s) to scan", "", "All Files (*)")
        for file_path in file_paths:
            self.file_path_list.addItem(file_path)

    def remove_files(self):
        for item in self.file_path_list.selectedItems():
            self.file_path_list.takeItem(self.file_path_list.row(item))

    def scan_files(self):
        # Get the file paths to scan
        file_paths = []
        for i in range(self.file_path_list.count()):
            file_paths.append(self.file_path_list.item(i).text())

        # Clear the result log
        self.result_log.clear()

        # Scan the files
        self.progress_bar.setVisible(True)
        self.progress_bar.setMaximum(len(file_paths))
        self.progress_bar.setValue(0)

        def progress_callback(i, total):
            self.progress_bar.setValue(i+1)

        scanner = MalwareScanner()
        results = scanner.scan_files(file_paths, progress_callback)

        # Display the results
        for file_path, result in results:
            self.result_log.append(f"{file_path}: {'Malicious' if result else 'Clean'}")

        # Hide the progress bar
        self.progress_bar.setVisible(False)

def log_activity(message):
    logging.info(message)

def log_result(message):
    logging.warning(message)

if __name__ == "__main__":
    # Configure the logger
    logging.basicConfig(filename="malware_scanner.log", level=logging.INFO, format="%(asctime)s %(message)s")

    # Create the application
    app = QtWidgets.QApplication([])

    # Create the main window
    main_window = MainWindow()
    main_window.show()

    # Run the application
    app.exec_()
