#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <regex>

// Define a struct to store the file metadata
struct FileMetadata {
    std::string name;
    std::string type;
    std::string size;
};

// Define a function to extract the file metadata from the filename
FileMetadata extractFileMetadata(std::string filename) {
    // Extract the file name
    std::string name = filename.substr(0, filename.find_last_of("."));
    
    // Extract the file type
    std::string type = filename.substr(filename.find_last_of(".") + 1);
    
    // Extract the file size
    std::ifstream file(filename, std::ios::binary | std::ios::ate);
    std::string size = std::to_string(file.tellg());
    
    // Return the file metadata
    return {name, type, size};
}

// Define a function to check if the file imports any suspicious libraries
bool hasSuspiciousImports(std::string filename) {
    // Open the file for reading
    std::ifstream file(filename, std::ios::binary);
    
    // Read the file contents into a buffer
    std::vector<char> buffer((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    
    // Convert the buffer to a string
    std::string content(buffer.begin(), buffer.end());
    
    // Define a regex pattern to match suspicious library imports
    std::regex pattern("(LoadLibrary|GetProcAddress)", std::regex_constants::icase);
    
    // Check if the pattern matches the file content
    return std::regex_search(content, pattern);
}

// Define the main function
int main(int argc, char* argv[]) {
    // Check if a filename was provided as an argument
    if (argc != 2) {
        std::cout << "Usage: " << argv[0] << " <filename>" << std::endl;
        return 1;
    }
    
    // Extract the file metadata
    FileMetadata metadata = extractFileMetadata(argv[1]);
    
    // Print the file metadata
    std::cout << "File name: " << metadata.name << std::endl;
    std::cout << "File type: " << metadata.type << std::endl;
    std::cout << "File size: " << metadata.size << " bytes" << std::endl;
    
    // Check if the file has suspicious imports
    if (hasSuspiciousImports(argv[1])) {
        std::cout << "The file has suspicious imports." << std::endl;
    } else {
        std::cout << "The file does not have suspicious imports." << std::endl;
    }
    
    // Return success
    return 0;
}
